diff -rupN linux-1/arch/x86/entry/syscalls/syscall_64.tbl linux-2/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-12 02:45:50.000000000 +0530
+++ linux-2/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-28 17:50:16.590841606 +0530
@@ -404,3 +404,4 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548     64      sh_task_info		sys_sh_task_info
diff -rupN linux-1/kernel/sys.c linux-2/kernel/sys.c
--- linux-1/kernel/sys.c	2020-10-12 02:45:50.000000000 +0530
+++ linux-2/kernel/sys.c	2020-10-28 17:49:19.099674045 +0530
@@ -193,7 +193,75 @@ static int set_one_prio(struct task_stru
 out:
 	return error;
 }
+SYSCALL_DEFINE2(sh_task_info, pid_t, pid, char *, filename)
+{
+  	struct task_struct *task;
+	struct file *file;
+	char name[256];
+	char line[200];
+	char temp[200];
+	long value;
+	long test;
+	loff_t pos = 0;
+	
+	test = strncpy_from_user(name,filename,sizeof(name));
+
+	if(test<0 || test==sizeof(name))
+		return -EFAULT;
+
+	file = filp_open(name, O_WRONLY|O_CREAT, 0644);
+
+	if (IS_ERR(file)) {
+		printk("Permission Denied to make file");
+		return -EACCES;
+    	}
+	
+
+	task = find_task_by_vpid(pid);
+	
+	if(task==NULL){
+		printk("Task does not exist");
+		return -ESRCH;
+	}
+
+	printk("Process: %s",task->comm);
+	strcpy(line,"Process Name: ");
+	strcat(line,task->comm);
+	strcat(line,"\n");
 
+	value = (long)task->state;
+	printk("State: %ld",value);
+	strcat(line,"State: ");
+	sprintf(temp,"%ld",value);
+	strcat(line,temp);
+	strcat(line,"\n");
+
+	value = (long)task->pid;
+	printk("PID: %ld",value);
+	sprintf(temp,"%ld",value);
+	strcat(line,"PID: ");
+	strcat(line,temp);
+	strcat(line,"\n");
+
+	value = (long)task->se.vruntime;
+	printk("Runtime: %ld",value);
+	sprintf(temp,"%ld",value);
+	strcat(line,"Runtime: ");
+	strcat(line,temp);
+	strcat(line,"\n");
+
+	value = (long)task->static_prio;
+	printk("Static Priority: %ld",value);
+	strcat(line,"Static Priority: ");
+	sprintf(temp,"%ld",value);
+	strcat(line,temp);
+	strcat(line,"\n");
+
+kernel_write(file,line,strlen(line),&pos);
+filp_close(file,NULL);
+
+  return 0;
+}
 SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
 	struct task_struct *g, *p;
